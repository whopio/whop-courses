// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                 String                  @id
  whopAccessToken    String                  @db.VarChar(512)
  whopRefreshToken   String                  @db.VarChar(512)
  whopTokenExpiry    DateTime
  username           String                  @db.VarChar(512)
  email              String?                 @unique @db.VarChar(512)
  profilePicUrl      String?                 @db.VarChar(1024)
  lessonInteractions UserLessonInteraction[]
}

model Company {
  id      String   @id
  courses Course[]
}

model Course {
  id            String       @id @default(uuid())
  title         String       @db.VarChar(512)
  description   String       @db.Text
  coverImage    String?
  company       Company      @relation(fields: [companyId], references: [id])
  companyId     String
  chapters      Chapter[]
  status        CourseStatus @default(DRAFT)
  experienceId  String?
  accessPassIds String?      @db.Text

  @@index([companyId])
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum ChapterStatus {
  VISIBLE
  HIDDEN
}

model Chapter {
  id          String        @id @default(uuid())
  title       String        @db.VarChar(512)
  description String        @db.Text
  status      ChapterStatus
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courseId    String
  lessons     Lesson[]
  order       Int

  @@index([courseId])
}

model Lesson {
  id               String                  @id @default(uuid())
  title            String                  @db.VarChar(512)
  description      String?                 @db.Text
  mainVideoId      String?
  mainVideo        MuxVideo?               @relation(fields: [mainVideoId], references: [id])
  images           String                  @db.Text
  files            String                  @db.Text
  chapter          Chapter                 @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapterId        String
  userInteractions UserLessonInteraction[]
  order            Int
  duration         Int?

  @@index([mainVideoId])
  @@index([chapterId])
}

enum UserLessonStatus {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
}

model UserLessonInteraction {
  id       String           @id @default(uuid())
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   String
  lesson   Lesson           @relation(fields: [lessonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  lessonId String
  status   UserLessonStatus
  liked    Boolean

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model MuxVideo {
  id          String         @id @default(uuid())
  lessons     Lesson[]
  status      MuxVideoStatus
  playbackId  String?
  assetId     String?
  duration    Float?
  aspectRatio String?
}

enum MuxVideoStatus {
  WAITING
  READY
}
